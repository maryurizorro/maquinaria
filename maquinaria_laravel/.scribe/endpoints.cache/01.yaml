## Autogenerated by Scribe. DO NOT MODIFY.

name: Autenticación
description: |-

  Endpoints para registrar, iniciar sesión, cerrar sesión y obtener el perfil del usuario.
endpoints:
  -
    httpMethods:
      - POST
    uri: api/register
    metadata:
      groupName: Autenticación
      groupDescription: |-

        Endpoints para registrar, iniciar sesión, cerrar sesión y obtener el perfil del usuario.
      subgroup: ''
      subgroupDescription: ''
      title: 'Registrar un nuevo usuario'
      description: 'Permite crear un nuevo usuario con rol, email y contraseña.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Nombre completo del usuario.'
        required: true
        example: 'Maryuri Zorro'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'Correo electrónico válido.'
        required: true
        example: maryuri@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Contraseña del usuario (mínimo 6 caracteres).'
        required: true
        example: '123456'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      rol:
        name: rol
        description: 'Rol del usuario. Debe ser uno de: admin, empleado, supervisor.'
        required: true
        example: empleado
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Maryuri Zorro'
      email: maryuri@example.com
      password: '123456'
      rol: empleado
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "status": true,
            "message": "Usuario registrado exitosamente",
            "data": {
               "user": {
                   "id": 1,
                   "name": "Maryuri Zorro",
                   "email": "maryuri@example.com",
                   "rol": "empleado"
               },
               "token": "1|Xyz123abc456...",
               "token_type": "Bearer"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "status": false,
            "message": "Error de validación",
            "errors": {
               "email": ["El campo email ya ha sido registrado."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Bearer {YOUR_TOKEN}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/login
    metadata:
      groupName: Autenticación
      groupDescription: |-

        Endpoints para registrar, iniciar sesión, cerrar sesión y obtener el perfil del usuario.
      subgroup: ''
      subgroupDescription: ''
      title: 'Iniciar sesión'
      description: 'Permite iniciar sesión en el sistema con credenciales válidas y obtener un token.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Correo electrónico del usuario.'
        required: true
        example: maryuri@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Contraseña del usuario.'
        required: true
        example: '123456'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: maryuri@example.com
      password: '123456'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "message": "Login exitoso",
            "data": {
               "user": {
                   "id": 1,
                   "name": "Maryuri Zorro",
                   "email": "maryuri@example.com",
                   "rol": "empleado"
               },
               "token": "1|Xyz123abc456...",
               "token_type": "Bearer"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "status": false,
            "message": "Credenciales inválidas"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "status": false,
            "message": "Error de validación"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Bearer {YOUR_TOKEN}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/logout
    metadata:
      groupName: Autenticación
      groupDescription: |-

        Endpoints para registrar, iniciar sesión, cerrar sesión y obtener el perfil del usuario.
      subgroup: ''
      subgroupDescription: ''
      title: 'Cerrar sesión'
      description: 'Revoca el token actual del usuario autenticado.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "message": "Logout exitoso"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Bearer {YOUR_TOKEN}'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/me
    metadata:
      groupName: Autenticación
      groupDescription: |-

        Endpoints para registrar, iniciar sesión, cerrar sesión y obtener el perfil del usuario.
      subgroup: ''
      subgroupDescription: ''
      title: 'Obtener perfil del usuario autenticado'
      description: 'Devuelve la información del usuario que ha iniciado sesión.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": true,
            "data": {
               "id": 1,
               "name": "Maryuri Zorro",
               "email": "maryuri@example.com",
               "rol": "empleado"
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Bearer {YOUR_TOKEN}'
    controller: null
    method: null
    route: null
    custom: []
